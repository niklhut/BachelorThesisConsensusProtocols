// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: client.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RaftClient_Put_FullMethodName            = "/raft.RaftClient/Put"
	RaftClient_Get_FullMethodName            = "/raft.RaftClient/Get"
	RaftClient_GetDebug_FullMethodName       = "/raft.RaftClient/GetDebug"
	RaftClient_GetServerState_FullMethodName = "/raft.RaftClient/GetServerState"
	RaftClient_GetServerTerm_FullMethodName  = "/raft.RaftClient/GetServerTerm"
	RaftClient_GetDiagnostics_FullMethodName = "/raft.RaftClient/GetDiagnostics"
)

// RaftClientClient is the client API for RaftClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for clients to interact with the replicated key-value store
type RaftClientClient interface {
	// Add or update a key-value pair
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	// Retrieve a value by key
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Retrieve a value by key, also returns when not a leader
	GetDebug(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Get the state of a server
	GetServerState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServerStateResponse, error)
	// Get the term of a server
	GetServerTerm(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServerTermResponse, error)
	// Get the diagnostics of a server
	GetDiagnostics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DiagnosticsResponse, error)
}

type raftClientClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftClientClient(cc grpc.ClientConnInterface) RaftClientClient {
	return &raftClientClient{cc}
}

func (c *raftClientClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, RaftClient_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClientClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, RaftClient_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClientClient) GetDebug(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, RaftClient_GetDebug_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClientClient) GetServerState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServerStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerStateResponse)
	err := c.cc.Invoke(ctx, RaftClient_GetServerState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClientClient) GetServerTerm(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServerTermResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerTermResponse)
	err := c.cc.Invoke(ctx, RaftClient_GetServerTerm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClientClient) GetDiagnostics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DiagnosticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiagnosticsResponse)
	err := c.cc.Invoke(ctx, RaftClient_GetDiagnostics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftClientServer is the server API for RaftClient service.
// All implementations must embed UnimplementedRaftClientServer
// for forward compatibility.
//
// Service for clients to interact with the replicated key-value store
type RaftClientServer interface {
	// Add or update a key-value pair
	Put(context.Context, *PutRequest) (*PutResponse, error)
	// Retrieve a value by key
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Retrieve a value by key, also returns when not a leader
	GetDebug(context.Context, *GetRequest) (*GetResponse, error)
	// Get the state of a server
	GetServerState(context.Context, *emptypb.Empty) (*ServerStateResponse, error)
	// Get the term of a server
	GetServerTerm(context.Context, *emptypb.Empty) (*ServerTermResponse, error)
	// Get the diagnostics of a server
	GetDiagnostics(context.Context, *emptypb.Empty) (*DiagnosticsResponse, error)
	mustEmbedUnimplementedRaftClientServer()
}

// UnimplementedRaftClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRaftClientServer struct{}

func (UnimplementedRaftClientServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedRaftClientServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRaftClientServer) GetDebug(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDebug not implemented")
}
func (UnimplementedRaftClientServer) GetServerState(context.Context, *emptypb.Empty) (*ServerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerState not implemented")
}
func (UnimplementedRaftClientServer) GetServerTerm(context.Context, *emptypb.Empty) (*ServerTermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerTerm not implemented")
}
func (UnimplementedRaftClientServer) GetDiagnostics(context.Context, *emptypb.Empty) (*DiagnosticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiagnostics not implemented")
}
func (UnimplementedRaftClientServer) mustEmbedUnimplementedRaftClientServer() {}
func (UnimplementedRaftClientServer) testEmbeddedByValue()                    {}

// UnsafeRaftClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftClientServer will
// result in compilation errors.
type UnsafeRaftClientServer interface {
	mustEmbedUnimplementedRaftClientServer()
}

func RegisterRaftClientServer(s grpc.ServiceRegistrar, srv RaftClientServer) {
	// If the following call pancis, it indicates UnimplementedRaftClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RaftClient_ServiceDesc, srv)
}

func _RaftClient_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftClientServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftClient_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftClientServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftClient_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftClientServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftClient_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftClientServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftClient_GetDebug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftClientServer).GetDebug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftClient_GetDebug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftClientServer).GetDebug(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftClient_GetServerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftClientServer).GetServerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftClient_GetServerState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftClientServer).GetServerState(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftClient_GetServerTerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftClientServer).GetServerTerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftClient_GetServerTerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftClientServer).GetServerTerm(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftClient_GetDiagnostics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftClientServer).GetDiagnostics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftClient_GetDiagnostics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftClientServer).GetDiagnostics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RaftClient_ServiceDesc is the grpc.ServiceDesc for RaftClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaftClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raft.RaftClient",
	HandlerType: (*RaftClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _RaftClient_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RaftClient_Get_Handler,
		},
		{
			MethodName: "GetDebug",
			Handler:    _RaftClient_GetDebug_Handler,
		},
		{
			MethodName: "GetServerState",
			Handler:    _RaftClient_GetServerState_Handler,
		},
		{
			MethodName: "GetServerTerm",
			Handler:    _RaftClient_GetServerTerm_Handler,
		},
		{
			MethodName: "GetDiagnostics",
			Handler:    _RaftClient_GetDiagnostics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client.proto",
}
