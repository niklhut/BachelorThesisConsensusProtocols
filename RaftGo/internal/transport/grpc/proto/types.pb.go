// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: types.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the current role of the server in the Raft cluster
type ServerState int32

const (
	// Passive role; waits for messages from leader
	ServerState_FOLLOWER ServerState = 0
	// Candidate trying to gather votes to become leader
	ServerState_CANDIDATE ServerState = 1
	// Active leader role that sends heartbeats and manages log replication
	ServerState_LEADER ServerState = 2
)

// Enum value maps for ServerState.
var (
	ServerState_name = map[int32]string{
		0: "FOLLOWER",
		1: "CANDIDATE",
		2: "LEADER",
	}
	ServerState_value = map[string]int32{
		"FOLLOWER":  0,
		"CANDIDATE": 1,
		"LEADER":    2,
	}
)

func (x ServerState) Enum() *ServerState {
	p := new(ServerState)
	*p = x
	return p
}

func (x ServerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerState) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[0].Descriptor()
}

func (ServerState) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[0]
}

func (x ServerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerState.Descriptor instead.
func (ServerState) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

// A peer in the cluster
type Peer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the peer
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Address of the peer
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Port of the peer
	Port          uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Peer) Reset() {
	*x = Peer{}
	mi := &file_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

func (x *Peer) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Peer) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Peer) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// A single entry in the replicated log
type LogEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Term when the entry was received by the leader
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// Key for the key-value operation, optional for no-op entries
	Key *string `protobuf:"bytes,2,opt,name=key,proto3,oneof" json:"key,omitempty"`
	// Optional value (null if this is a deletion or no-op)
	Value         *string `protobuf:"bytes,3,opt,name=value,proto3,oneof" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	mi := &file_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

func (x *LogEntry) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *LogEntry) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *LogEntry) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// The durable state persisted to disk across crashes
type PersistentState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Latest term server has seen (initialized to 0)
	CurrentTerm uint64 `protobuf:"varint,1,opt,name=current_term,json=currentTerm,proto3" json:"current_term,omitempty"`
	// Candidate ID that received vote in current term (or null)
	VotedFor *uint32 `protobuf:"varint,2,opt,name=voted_for,json=votedFor,proto3,oneof" json:"voted_for,omitempty"`
	// Log entries, each containing a command for the state machine
	Log []*LogEntry `protobuf:"bytes,3,rep,name=log,proto3" json:"log,omitempty"`
	// State machine state
	StateMachine map[string]string `protobuf:"bytes,4,rep,name=state_machine,json=stateMachine,proto3" json:"state_machine,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Latest snapshot of the state machine
	Snapshot *Snapshot `protobuf:"bytes,5,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	// The self peer config
	OwnPeer *Peer `protobuf:"bytes,6,opt,name=ownPeer,proto3" json:"ownPeer,omitempty"`
	// List of peers in the cluster
	Peers         []*Peer `protobuf:"bytes,7,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PersistentState) Reset() {
	*x = PersistentState{}
	mi := &file_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PersistentState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistentState) ProtoMessage() {}

func (x *PersistentState) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistentState.ProtoReflect.Descriptor instead.
func (*PersistentState) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

func (x *PersistentState) GetCurrentTerm() uint64 {
	if x != nil {
		return x.CurrentTerm
	}
	return 0
}

func (x *PersistentState) GetVotedFor() uint32 {
	if x != nil && x.VotedFor != nil {
		return *x.VotedFor
	}
	return 0
}

func (x *PersistentState) GetLog() []*LogEntry {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *PersistentState) GetStateMachine() map[string]string {
	if x != nil {
		return x.StateMachine
	}
	return nil
}

func (x *PersistentState) GetSnapshot() *Snapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *PersistentState) GetOwnPeer() *Peer {
	if x != nil {
		return x.OwnPeer
	}
	return nil
}

func (x *PersistentState) GetPeers() []*Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

// Volatile state maintained in memory
type VolatileState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Index of highest log entry known to be committed
	CommitIndex uint64 `protobuf:"varint,1,opt,name=commit_index,json=commitIndex,proto3" json:"commit_index,omitempty"`
	// Index of highest log entry applied to state machine
	LastApplied uint64 `protobuf:"varint,2,opt,name=last_applied,json=lastApplied,proto3" json:"last_applied,omitempty"`
	// Current role/state of this server
	State ServerState `protobuf:"varint,3,opt,name=state,proto3,enum=raft.ServerState" json:"state,omitempty"`
	// ID of the current leader, if this node is a follower
	CurrentLeaderId *uint32 `protobuf:"varint,4,opt,name=current_leader_id,json=currentLeaderId,proto3,oneof" json:"current_leader_id,omitempty"`
	// Last heartbeat time
	LastHeartbeat *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_heartbeat,json=lastHeartbeat,proto3" json:"last_heartbeat,omitempty"`
	// Election timeout
	ElectionTimeout uint32 `protobuf:"varint,6,opt,name=election_timeout,json=electionTimeout,proto3" json:"election_timeout,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VolatileState) Reset() {
	*x = VolatileState{}
	mi := &file_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolatileState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolatileState) ProtoMessage() {}

func (x *VolatileState) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolatileState.ProtoReflect.Descriptor instead.
func (*VolatileState) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

func (x *VolatileState) GetCommitIndex() uint64 {
	if x != nil {
		return x.CommitIndex
	}
	return 0
}

func (x *VolatileState) GetLastApplied() uint64 {
	if x != nil {
		return x.LastApplied
	}
	return 0
}

func (x *VolatileState) GetState() ServerState {
	if x != nil {
		return x.State
	}
	return ServerState_FOLLOWER
}

func (x *VolatileState) GetCurrentLeaderId() uint32 {
	if x != nil && x.CurrentLeaderId != nil {
		return *x.CurrentLeaderId
	}
	return 0
}

func (x *VolatileState) GetLastHeartbeat() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHeartbeat
	}
	return nil
}

func (x *VolatileState) GetElectionTimeout() uint32 {
	if x != nil {
		return x.ElectionTimeout
	}
	return 0
}

// Leader-only volatile state tracking next log entry to send to each follower
type LeaderState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// For each follower, index of the next log entry to send to that follower
	NextIndex map[uint32]uint64 `protobuf:"bytes,1,rep,name=next_index,json=nextIndex,proto3" json:"next_index,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// For each follower, index of highest log entry known to be replicated on that follower
	MatchIndex    map[uint32]uint64 `protobuf:"bytes,2,rep,name=match_index,json=matchIndex,proto3" json:"match_index,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaderState) Reset() {
	*x = LeaderState{}
	mi := &file_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaderState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderState) ProtoMessage() {}

func (x *LeaderState) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderState.ProtoReflect.Descriptor instead.
func (*LeaderState) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4}
}

func (x *LeaderState) GetNextIndex() map[uint32]uint64 {
	if x != nil {
		return x.NextIndex
	}
	return nil
}

func (x *LeaderState) GetMatchIndex() map[uint32]uint64 {
	if x != nil {
		return x.MatchIndex
	}
	return nil
}

// A snapshot of the entire state machine
type Snapshot struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Index of last log entry included in the snapshot
	LastIncludedIndex uint64 `protobuf:"varint,1,opt,name=last_included_index,json=lastIncludedIndex,proto3" json:"last_included_index,omitempty"`
	// Term of last log entry included in the snapshot
	LastIncludedTerm uint64 `protobuf:"varint,2,opt,name=last_included_term,json=lastIncludedTerm,proto3" json:"last_included_term,omitempty"`
	// State machine state
	StateMachine  map[string]string `protobuf:"bytes,3,rep,name=state_machine,json=stateMachine,proto3" json:"state_machine,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	mi := &file_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{5}
}

func (x *Snapshot) GetLastIncludedIndex() uint64 {
	if x != nil {
		return x.LastIncludedIndex
	}
	return 0
}

func (x *Snapshot) GetLastIncludedTerm() uint64 {
	if x != nil {
		return x.LastIncludedTerm
	}
	return 0
}

func (x *Snapshot) GetStateMachine() map[string]string {
	if x != nil {
		return x.StateMachine
	}
	return nil
}

var File_types_proto protoreflect.FileDescriptor

const file_types_proto_rawDesc = "" +
	"\n" +
	"\vtypes.proto\x12\x04raft\x1a\x1fgoogle/protobuf/timestamp.proto\"D\n" +
	"\x04Peer\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12\x12\n" +
	"\x04port\x18\x03 \x01(\rR\x04port\"b\n" +
	"\bLogEntry\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x04R\x04term\x12\x15\n" +
	"\x03key\x18\x02 \x01(\tH\x00R\x03key\x88\x01\x01\x12\x19\n" +
	"\x05value\x18\x03 \x01(\tH\x01R\x05value\x88\x01\x01B\x06\n" +
	"\x04_keyB\b\n" +
	"\x06_value\"\x89\x03\n" +
	"\x0fPersistentState\x12!\n" +
	"\fcurrent_term\x18\x01 \x01(\x04R\vcurrentTerm\x12 \n" +
	"\tvoted_for\x18\x02 \x01(\rH\x00R\bvotedFor\x88\x01\x01\x12 \n" +
	"\x03log\x18\x03 \x03(\v2\x0e.raft.LogEntryR\x03log\x12L\n" +
	"\rstate_machine\x18\x04 \x03(\v2'.raft.PersistentState.StateMachineEntryR\fstateMachine\x12*\n" +
	"\bsnapshot\x18\x05 \x01(\v2\x0e.raft.SnapshotR\bsnapshot\x12$\n" +
	"\aownPeer\x18\x06 \x01(\v2\n" +
	".raft.PeerR\aownPeer\x12 \n" +
	"\x05peers\x18\a \x03(\v2\n" +
	".raft.PeerR\x05peers\x1a?\n" +
	"\x11StateMachineEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\f\n" +
	"\n" +
	"_voted_for\"\xb3\x02\n" +
	"\rVolatileState\x12!\n" +
	"\fcommit_index\x18\x01 \x01(\x04R\vcommitIndex\x12!\n" +
	"\flast_applied\x18\x02 \x01(\x04R\vlastApplied\x12'\n" +
	"\x05state\x18\x03 \x01(\x0e2\x11.raft.ServerStateR\x05state\x12/\n" +
	"\x11current_leader_id\x18\x04 \x01(\rH\x00R\x0fcurrentLeaderId\x88\x01\x01\x12A\n" +
	"\x0elast_heartbeat\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\rlastHeartbeat\x12)\n" +
	"\x10election_timeout\x18\x06 \x01(\rR\x0felectionTimeoutB\x14\n" +
	"\x12_current_leader_id\"\x8f\x02\n" +
	"\vLeaderState\x12?\n" +
	"\n" +
	"next_index\x18\x01 \x03(\v2 .raft.LeaderState.NextIndexEntryR\tnextIndex\x12B\n" +
	"\vmatch_index\x18\x02 \x03(\v2!.raft.LeaderState.MatchIndexEntryR\n" +
	"matchIndex\x1a<\n" +
	"\x0eNextIndexEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1a=\n" +
	"\x0fMatchIndexEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\"\xf0\x01\n" +
	"\bSnapshot\x12.\n" +
	"\x13last_included_index\x18\x01 \x01(\x04R\x11lastIncludedIndex\x12,\n" +
	"\x12last_included_term\x18\x02 \x01(\x04R\x10lastIncludedTerm\x12E\n" +
	"\rstate_machine\x18\x03 \x03(\v2 .raft.Snapshot.StateMachineEntryR\fstateMachine\x1a?\n" +
	"\x11StateMachineEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01*6\n" +
	"\vServerState\x12\f\n" +
	"\bFOLLOWER\x10\x00\x12\r\n" +
	"\tCANDIDATE\x10\x01\x12\n" +
	"\n" +
	"\x06LEADER\x10\x02B:Z8github.com/niklhut/raft_go/internal/transport/grpc/protob\x06proto3"

var (
	file_types_proto_rawDescOnce sync.Once
	file_types_proto_rawDescData []byte
)

func file_types_proto_rawDescGZIP() []byte {
	file_types_proto_rawDescOnce.Do(func() {
		file_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_types_proto_rawDesc), len(file_types_proto_rawDesc)))
	})
	return file_types_proto_rawDescData
}

var file_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_types_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_types_proto_goTypes = []any{
	(ServerState)(0),              // 0: raft.ServerState
	(*Peer)(nil),                  // 1: raft.Peer
	(*LogEntry)(nil),              // 2: raft.LogEntry
	(*PersistentState)(nil),       // 3: raft.PersistentState
	(*VolatileState)(nil),         // 4: raft.VolatileState
	(*LeaderState)(nil),           // 5: raft.LeaderState
	(*Snapshot)(nil),              // 6: raft.Snapshot
	nil,                           // 7: raft.PersistentState.StateMachineEntry
	nil,                           // 8: raft.LeaderState.NextIndexEntry
	nil,                           // 9: raft.LeaderState.MatchIndexEntry
	nil,                           // 10: raft.Snapshot.StateMachineEntry
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_types_proto_depIdxs = []int32{
	2,  // 0: raft.PersistentState.log:type_name -> raft.LogEntry
	7,  // 1: raft.PersistentState.state_machine:type_name -> raft.PersistentState.StateMachineEntry
	6,  // 2: raft.PersistentState.snapshot:type_name -> raft.Snapshot
	1,  // 3: raft.PersistentState.ownPeer:type_name -> raft.Peer
	1,  // 4: raft.PersistentState.peers:type_name -> raft.Peer
	0,  // 5: raft.VolatileState.state:type_name -> raft.ServerState
	11, // 6: raft.VolatileState.last_heartbeat:type_name -> google.protobuf.Timestamp
	8,  // 7: raft.LeaderState.next_index:type_name -> raft.LeaderState.NextIndexEntry
	9,  // 8: raft.LeaderState.match_index:type_name -> raft.LeaderState.MatchIndexEntry
	10, // 9: raft.Snapshot.state_machine:type_name -> raft.Snapshot.StateMachineEntry
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_types_proto_init() }
func file_types_proto_init() {
	if File_types_proto != nil {
		return
	}
	file_types_proto_msgTypes[1].OneofWrappers = []any{}
	file_types_proto_msgTypes[2].OneofWrappers = []any{}
	file_types_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_types_proto_rawDesc), len(file_types_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_proto_goTypes,
		DependencyIndexes: file_types_proto_depIdxs,
		EnumInfos:         file_types_proto_enumTypes,
		MessageInfos:      file_types_proto_msgTypes,
	}.Build()
	File_types_proto = out.File
	file_types_proto_goTypes = nil
	file_types_proto_depIdxs = nil
}
