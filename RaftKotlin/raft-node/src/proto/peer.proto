syntax = "proto3";
package raft;

import "types.proto";

// Service for inter-node Raft communication
service RaftPeer {
  // Heartbeat and log replication from leader to followers
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);

  // Voting request from candidates
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);

  // Used by leader to send a snapshot to lagging followers
  rpc InstallSnapshot(InstallSnapshotRequest) returns (InstallSnapshotResponse);
}

// Leader -> Follower: Heartbeat or log replication
message AppendEntriesRequest {
  // Leader's current term
  uint64 term = 1;

  // ID of the leader making the request
  uint32 leader_id = 2;

  // Index of log entry immediately preceding new ones
  uint64 prev_log_index = 3;

  // Term of prev_log_index entry
  uint64 prev_log_term = 4;

  // Log entries to store
  repeated LogEntry entries = 5;

  // Leader's commit index
  uint64 leader_commit = 6;
}

// Follower -> Leader: Response to AppendEntries
message AppendEntriesResponse {
  // Current term
  uint64 term = 1;

  // True if follower contained entry matching prev_log_index and prev_log_term
  bool success = 2;
}

// Candidate -> Peer: Request for votes
message RequestVoteRequest {
  // Candidate’s term
  uint64 term = 1;

  // ID of the candidate requesting vote
  uint32 candidate_id = 2;

  // Index of candidate’s last log entry
  uint64 last_log_index = 3;

  // Term of candidate’s last log entry
  uint64 last_log_term = 4;
}

// Peer -> Candidate: Vote result
message RequestVoteResponse {
  // Current term
  uint64 term = 1;

  // True if vote granted
  bool vote_granted = 2;
}

// Leader -> Follower: Snapshot installation for log compaction
message InstallSnapshotRequest {
  // Leader’s term
  uint64 term = 1;

  // ID of leader
  uint32 leader_id = 2;

  // Serialized snapshot data
  Snapshot snapshot = 5;
}

// Follower -> Leader: Snapshot installation result
message InstallSnapshotResponse {
   // Current term
  uint64 term = 1;
}
